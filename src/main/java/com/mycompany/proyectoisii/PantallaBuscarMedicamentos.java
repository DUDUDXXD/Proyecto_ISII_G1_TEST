/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectoisii;

import com.mycompany.proyectoisii.Modelo.Medicamento;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pmare
 */
public class PantallaBuscarMedicamentos extends javax.swing.JFrame {

    private Modelo.GestorDeMedicamentos gestorDeMedicamentos;
    /**
     * Creates new form PantallaBuscarMedicamentos
     */
    public PantallaBuscarMedicamentos() {
        initComponents();
        gestorDeMedicamentos = new Modelo.GestorDeMedicamentos();
        cargarTablaInicial();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Medicamento");

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "NOMBRE", "TRATAMIENTO", "DOSIS", "EFECTOS SECUNDARIOS"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String medicamentoBuscado = jTextField1.getText();
        if (medicamentoBuscado.isBlank()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Por favor, ingresa un medicamento.");
        return;
    }
        Object[][] datos = buscarMedicamento(medicamentoBuscado);
        if (datos.length == 0) {
        javax.swing.JOptionPane.showMessageDialog(this, "No se encontraron resultados.");
    } else {
        actualizarTabla(datos);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private Object[][] buscarMedicamento(String nombre) {

    // Obtener todas las enfermedades
    List<Medicamento> medicamentos = gestorDeMedicamentos.obtenerTodosLosMedicamentos();
    
    // Crear una lista para almacenar los resultados
    List<Object[]> resultados = new ArrayList<>();
    
    // Filtrar las enfermedades que contengan el medicamento buscado
    for (Medicamento medicamento : medicamentos) {
        if (medicamento.getNombre().toLowerCase().contains(nombre.toLowerCase())) {
            // Si el medicamento de la enfermedad coincide con la búsqueda, agregarlo a los resultados
            resultados.add(new Object[]{
                medicamento.getNombre(),
                medicamento.getTratamiento(),
                medicamento.getDosis(),
                medicamento.getEfectoSecundario()
            });
        }
    }
    
    // Convertir los resultados a un array de objetos para la tabla
    return resultados.toArray(new Object[0][0]);
    }
    
    private void cargarTablaInicial() {
        // Obtener todos los medicamentos desde GestorDeMedicamentos
    List<Medicamento> medicamentos = Modelo.GestorDeMedicamentos.obtenerTodosLosMedicamentos();

    // Verifica si los medicamentos están disponibles
    if (medicamentos == null || medicamentos.isEmpty()) {
        JOptionPane.showMessageDialog(this, "No hay medicamentos disponibles.");
        return;
    }

    // Crear el modelo de tabla
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

    // Limpiar la tabla antes de cargar los nuevos datos
    tableModel.setRowCount(0);  // Elimina todas las filas de la tabla

    // Recorrer los medicamentos y añadir los datos a la tabla
    for (Medicamento medicamento : medicamentos) {
        Object[] row = {
            medicamento.getNombre(),        // Nombre del medicamento
            medicamento.getTratamiento(),   // Tratamiento
            medicamento.getDosis(),         // Dosis
            medicamento.getEfectoSecundario()        // Alergia
        };
        tableModel.addRow(row);  // Añadir la fila al modelo de la tabla
    }
}
    
    // Método para actualizar la tabla
private void actualizarTabla(Object[][] datos) {
    jTable1.setModel(new javax.swing.table.DefaultTableModel(
        datos,
        new String[] {"NOMBRE", "TRATAMIENTO", "ALERGIAS", "EFECTOS SECUNDARIOS"}
    ));
}
    
    
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
